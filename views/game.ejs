<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/styles.css" />
    <title>Monster Mayhem</title>
    <style>
      /* Add styles for the popup */
      .popup {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
      }
      .popup-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        text-align: center;
      }
      .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
      }
      .close:hover,
      .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }
    </style>
  </head>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    socket.on("game", (game) => {
      const mePlayerId = JSON.parse(`<%- JSON.stringify(user) %>`)._id;
      const player0MonsterCount = game.grid
        .flat()
        .filter(
          (cell) => cell.monster && cell.monster.player === game.players[0]._id
        ).length;
      const player1MonsterCount = game.grid
        .flat()
        .filter(
          (cell) => cell.monster && cell.monster.player === game.players[1]._id
        ).length;
      const resultBg = document.querySelector("#resultBg");
      const resultDiv = document.querySelector("#resultDiv");
      if (player0MonsterCount === 0 || player1MonsterCount === 0) {
        if (player0MonsterCount === 0 && player1MonsterCount === 0) {
          resultBg.style.display = "block";
          resultDiv.style.display = "block";
          resultDiv.innerHTML = `<h1 style="color: white; background: #ccc; padding: 1rem">Draw!</h1><a href="/game">Play again</a> <a href="/profile">Go to profile</a>`;
        } else if (
          player0MonsterCount === 0 &&
          game.players[0]._id === mePlayerId
        ) {
          resultBg.style.display = "block";
          resultDiv.style.display = "block";
          resultDiv.innerHTML = `<h1 style="color: white; background: red; padding: 1rem">You lost!</h1><a href="/game">Play again</a> <a href="/profile">Go to profile</a>`;
        } else if (
          player1MonsterCount === 0 &&
          game.players[1]._id === mePlayerId
        ) {
          resultBg.style.display = "block";
          resultDiv.style.display = "block";
          resultDiv.innerHTML = `<h1 style="color: white; background: red; padding: 1rem">You Lost!</h1><a href="/game">Play again</a> <a href="/profile">Go to profile</a>`;
        } else if (
          player0MonsterCount === 0 &&
          game.players[1]._id === mePlayerId
        ) {
          resultBg.style.display = "block";
          resultDiv.style.display = "block";
          resultDiv.innerHTML = `<h1 style="color: white; background: green; padding: 1rem">You won!</h1><a href="/game">Play again</a> <a href="/profile">Go to profile</a>`;
        } else if (
          player1MonsterCount === 0 &&
          game.players[0]._id === mePlayerId
        ) {
          resultBg.style.display = "block";
          resultDiv.style.display = "block";
          resultDiv.innerHTML = `<h1 style="color: white; background: green; padding: 1rem">You won!</h1><a href="/game">Play again</a> <a href="/profile">Go to profile</a>`;
        }
        socket.emit("result", {
          gameId: game._id,
          players: game.players.map((player) => player._id),
          winner:
            player0MonsterCount === 0 && player1MonsterCount === 0
              ? null
              : player0MonsterCount === 0
              ? game.players[1]._id
              : game.players[0]._id,
        });
      }
      const playersList = document.querySelector("#playersList");
      playersList.innerHTML = `
        <h3 style="color: white; background: orange; ${
          game.turn === game.players[0]._id
            ? "padding: .5rem 1rem;"
            : "padding: .3rem .8rem;"
        }">${game.players[0].name}
          ${
            game.turn === game.players[0]._id
              ? `<span style="font-size: 1rem"> (T) </span>`
              : ""
          }
        </h3>
        <h3 style="color: white; background: red; ${
          game.turn === game.players[1]._id
            ? "padding: .5rem 1rem;"
            : "padding: .3rem .8rem;"
        }
        ">${game.players[1].name}
          ${
            game.turn === game.players[1]._id
              ? `<span style="font-size: 1rem"> (T) </span>`
              : ""
          }
        </h3>
      `;
      const cells = document.querySelectorAll(".cell");
      const gameGrid = game.grid;
      cells.forEach((cell, index) => {
        cell.addEventListener("click", handleCellClick);
        const x = Math.floor(index / 10);
        const y = index % 10;
        cell.style.backgroundColor = gameGrid[x][y].monster
          ? gameGrid[x][y].monster.player === game.players[0]._id
            ? "orange"
            : "red"
          : "white";
        cell.innerHTML = gameGrid[x][y].monster
          ? `<img src="/images/${gameGrid[x][y].monster.type}.png" style="width: 100%; height: 100%; object-fit: contain" />`
          : "";
      });
      // Function to handle cell click
      function handleCellClick(event) {
        const mePlayerId = JSON.parse(`<%- JSON.stringify(user) %>`)._id;
        if (game.turn !== mePlayerId) return;
        const otherPlayerId = game.players.find(
          (player) => player._id !== mePlayerId
        )._id;
        const cell = event.currentTarget;
        const x = Number(cell.dataset.x);
        const y = Number(cell.dataset.y);
        const cells = document.querySelectorAll(".cell");
        const selectedCell = Array.from(cells).find(
          (cell) => cell.dataset.selected === "true"
        );
        if (
          selectedCell &&
          getPathCells(
            game,
            Number(selectedCell.dataset.x),
            Number(selectedCell.dataset.y),
            mePlayerId,
            otherPlayerId
          ).includes(cell)
        ) {
          const fromMonster =
            game.grid[Number(selectedCell.dataset.x)][
              Number(selectedCell.dataset.y)
            ].monster;
          const toMonster = game.grid[x][y].monster;
          if (!toMonster) {
            game.grid[x][y].monster = fromMonster;
            game.grid[Number(selectedCell.dataset.x)][
              Number(selectedCell.dataset.y)
            ].monster = null;
          } else {
            if (
              (fromMonster.type === "vampire" &&
                toMonster.type === "werewolf") ||
              (fromMonster.type === "werewolf" && toMonster.type === "vampire")
            ) {
              game.grid[x][y].monster = [fromMonster, toMonster].find(
                (monster) => monster.type === "vampire"
              );
              game.grid[Number(selectedCell.dataset.x)][
                Number(selectedCell.dataset.y)
              ].monster = null;
            } else if (
              (fromMonster.type === "werewolf" && toMonster.type === "ghost") ||
              (fromMonster.type === "ghost" && toMonster.type === "werewolf")
            ) {
              game.grid[x][y].monster = [fromMonster, toMonster].find(
                (monster) => monster.type === "werewolf"
              );
              game.grid[Number(selectedCell.dataset.x)][
                Number(selectedCell.dataset.y)
              ].monster = null;
            } else if (
              (fromMonster.type === "ghost" && toMonster.type === "vampire") ||
              (fromMonster.type === "vampire" && toMonster.type === "ghost")
            ) {
              game.grid[x][y].monster = [fromMonster, toMonster].find(
                (monster) => monster.type === "ghost"
              );
              game.grid[Number(selectedCell.dataset.x)][
                Number(selectedCell.dataset.y)
              ].monster = null;
            } else if (fromMonster.type === toMonster.type) {
              game.grid[x][y].monster = null;
              game.grid[Number(selectedCell.dataset.x)][
                Number(selectedCell.dataset.y)
              ].monster = null;
            }
          }
          game.turn = otherPlayerId;
          socket.emit("game", {
            gameId: game._id,
            game,
          });
          hidePath();
        } else {
          showPath(game, x, y, mePlayerId, otherPlayerId, event);
        }
      }
      renderGridOrWaitingMessage();
    });
    // Function to show path where monster can move
    function showPath(game, x, y, mePlayerId, otherPlayerId, event) {
      hidePath();
      if (!game.grid[x][y].monster) return;
      if (game.grid[x][y].monster.player !== mePlayerId) return;
      event.currentTarget.dataset.selected = "true";
      const pathCells = getPathCells(game, x, y, mePlayerId, otherPlayerId);
      pathCells.forEach((pathCell) => {
        pathCell.style.boxShadow = "0 0 10px 5px green";
      });
    }
    function hidePath() {
      const cells = document.querySelectorAll(".cell");
      cells.forEach((cell) => {
        cell.style.boxShadow = "none";
        cell.dataset.selected = "false";
      });
    }
    // Function to get path cells
    function getPathCells(game, x, y, mePlayerId, otherPlayerId) {
      const cells = document.querySelectorAll(".cell");
      let pathCells = [];
      for (let i = x + 1; i < 10; i++) {
        if (game.grid[i][y].monster) {
          if (game.grid[i][y].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[i][y].monster.player === otherPlayerId) {
            pathCells.push(cells[i * 10 + y]);
            break;
          }
        } else {
          pathCells.push(cells[i * 10 + y]);
        }
      }
      for (let i = x - 1; i >= 0; i--) {
        if (game.grid[i][y].monster) {
          if (game.grid[i][y].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[i][y].monster.player === otherPlayerId) {
            pathCells.push(cells[i * 10 + y]);
            break;
          }
        } else {
          pathCells.push(cells[i * 10 + y]);
        }
      }
      for (let i = y + 1; i < 10; i++) {
        if (game.grid[x][i].monster) {
          if (game.grid[x][i].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[x][i].monster.player === otherPlayerId) {
            pathCells.push(cells[x * 10 + i]);
            break;
          }
        } else {
          pathCells.push(cells[x * 10 + i]);
        }
      }
      for (let i = y - 1; i >= 0; i--) {
        if (game.grid[x][i].monster) {
          if (game.grid[x][i].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[x][i].monster.player === otherPlayerId) {
            pathCells.push(cells[x * 10 + i]);
            break;
          }
        } else {
          pathCells.push(cells[x * 10 + i]);
        }
      }
      for (let i = x + 1, j = y + 1; i < x + 3 && j < y + 3; i++, j++) {
        if (i >= 10 || j >= 10) break;
        if (game.grid[i][j].monster) {
          if (game.grid[i][j].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[i][j].monster.player === otherPlayerId) {
            pathCells.push(cells[i * 10 + j]);
            break;
          }
        } else {
          pathCells.push(cells[i * 10 + j]);
        }
      }
      for (let i = x - 1, j = y - 1; i > x - 3 && j > y - 3; i--, j--) {
        if (i < 0 || j < 0) break;
        if (game.grid[i][j].monster) {
          if (game.grid[i][j].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[i][j].monster.player === otherPlayerId) {
            pathCells.push(cells[i * 10 + j]);
            break;
          }
        } else {
          pathCells.push(cells[i * 10 + j]);
        }
      }
      for (let i = x + 1, j = y - 1; i < x + 3 && j > y - 3; i++, j--) {
        if (i >= 10 || j < 0) break;
        if (game.grid[i][j].monster) {
          if (game.grid[i][j].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[i][j].monster.player === otherPlayerId) {
            pathCells.push(cells[i * 10 + j]);
            break;
          }
        } else {
          pathCells.push(cells[i * 10 + j]);
        }
      }
      for (let i = x - 1, j = y + 1; i > x - 3 && j < y + 3; i--, j++) {
        if (i < 0 || j >= 10) break;
        if (game.grid[i][j].monster) {
          if (game.grid[i][j].monster.player === mePlayerId) {
            continue;
          } else if (game.grid[i][j].monster.player === otherPlayerId) {
            pathCells.push(cells[i * 10 + j]);
            break;
          }
        } else {
          pathCells.push(cells[i * 10 + j]);
        }
      }
      return pathCells;
    }
    document.addEventListener("DOMContentLoaded", () => {
      const grid = document.querySelector("#grid");
      const game = JSON.parse(`<%- JSON.stringify(game) %>`);
      game.grid.forEach((row, x) => {
        row.forEach((cell, y) => {
          const cellElement = document.createElement("div");
          cellElement.classList.add("cell");
          cellElement.dataset.x = x;
          cellElement.dataset.y = y;
          grid.appendChild(cellElement);
        });
      });
      socket.emit("joinGame", { gameId: game._id });
      if (game.players.length === 2) {
        socket.emit("game", {
          gameId: game._id,
          game: JSON.parse(`<%- JSON.stringify(game) %>`),
        });
      }
    });
    function renderGridOrWaitingMessage() {
      const gridContainer = document.querySelector("#grid");
      const waitingMessage = document.querySelector("#waiting-message");
      gridContainer.style.display = "grid";
      waitingMessage.style.display = "none";
    }
  </script>
  <body>
    <header>
      <a href="/login">Login</a>
      <a href="/register">Register</a>
      <a href="/logout">Logout</a>
      <a href="/profile">Profile</a>
      <a href="/game">Play game</a>
      <a href="#" id="rulesLink">Rules</a>
    </header>
    <div class="container">
      <h2>Welcome, <%= user.name %></h2>
      <div id="playersList"></div>
      <h3 id="waiting-message" style="display: block">
        New game started! Waiting for another player...
      </h3>
      <div id="resultBg"></div>
      <div id="resultDiv"></div>
      <div id="grid" style="display: none"></div>
    </div>

    <!-- The Popup -->
    <div id="rulesPopup" class="popup">
      <div class="popup-content">
        <span class="close">&times;</span>
        <h2>Game Rules</h2>
        <p>If two monsters finish on the same square, they are dealt with as follows:</p>
        <ul>
          <li>If there’s a vampire and a werewolf, the werewolf is removed</li>
          <li>If there’s a werewolf and a ghost, the ghost is removed</li>
          <li>If there’s a ghost and a vampire, the vampire is removed</li>
          <li>If there’s two of the same kind of monster, both are removed</li>
        </ul>
      </div>
    </div>

    <script>
      // Get the popup
      var popup = document.getElementById("rulesPopup");

      // Get the link that opens the popup
      var link = document.getElementById("rulesLink");

      // Get the <span> element that closes the popup
      var span = document.getElementsByClassName("close")[0];

      // When the user clicks the link, open the popup 
      link.onclick = function(event) {
        event.preventDefault(); // Prevent the default anchor behavior
        popup.style.display = "block";
      }

      // When the user clicks on <span> (x), close the popup
      span.onclick = function() {
        popup.style.display = "none";
      }

      // When the user clicks anywhere outside of the popup, close it
      window.onclick = function(event) {
        if (event.target == popup) {
          popup.style.display = "none";
        }
      }
    </script>
  </body>
</html>
